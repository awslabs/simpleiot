# Â© 2021 Amazon Web Services, Inc. or its affiliates. All Rights Reserved.
#
# SimpleIOT project.
# Author: Ramin Firoozye (framin@amazon.com)
#

SELF_DIR := $(dir $(lastword $(MAKEFILE_LIST)))
# $(info SELF_DIR is [${SELF_DIR}])

DUMMY_VARIABLE := ''

# Input config file has constants.
#
include $(SELF_DIR)base.mk

ifneq ("$(wildcard $(INPUT_CONF_FILE))","")
  STACK_CONFIG_NAME := $(call FromInConf,stack_prefix)
#  $(info STACK_CONFIG_NAME is [${STACK_CONFIG_NAME}])
else
  $(error Missing input config file: $(INPUT_CONF_FILE))
endif

# If this has already been run once, we should have an output file in this directory,
# so we go load it up. The values will be used to either re-run the stack or
# to clean up before deleting.

ifneq ("$(wildcard $(OUTPUT_CONF_FILE))","")
  $(error Makefile has already been run. Do 'make clean to clean up: $(OUTPUT_CONF_FILE))
endif

SHELL := /bin/bash
#
# Deployment is a multi-phase process. We first create all the back-end resources necessary to
# run the application with a CDK stack passing a 'phase' variable to it.
# This involves creating S3 buckets, IOT endpoints, lambdas, databases, etc.
# Then we run a npm script to download all the certs to local files. Then we run another
# npm script that takes the pre-sets, construct the config files needed by different
# subsystems, and copies them into the right directories. These include settings needed
# for the dashboard, the mobile apps, etc.
# Then we run an npm build phase to rebuild the dashboard with the proper settings.
# The final phase is to re-run the cdk stack with a phase2 variable, which deploys the
# dashboard into an S3 bucket and a cloudfront deployment. The result of that is saved
# to a separate setting file which can then be used to launch the dashboard.
#
push:   $(INPUT_CONF_FILE) lib/$(STACK_CONFIG_NAME)-stack.ts ## deploy and push a stack
	@echo "Pushing CDK stack '$(STACK_CONFIG_NAME)' with profile '$(AWS_PROFILE)' to cloud"
	@mkdir -p $(BUILD_DIR)
	@npm run build
	@cdk deploy $(STACK_CONFIG_NAME) --profile $(AWS_PROFILE) \
		--require-approval never \
		--outputs-file $(OUTPUT_CONF_PATH)

#
# This takes the output json file generated by CDK and patches all the config files around.
# If there is a file ending in .json.template, it runs a template processor on them with the
# input config and generated output file and rewrites the config files so they can be run
# with the config values pointing at the current freshly generated stack.
#
config: $(UTIL_DIR)/downloadcerts.js $(UTIL_DIR)/updateconfig.js $(INPUT_CONF_PATH) $(OUTPUT_CONF_PATH) ## Reload config files
	@node $(UTIL_DIR)/updateconfig.js "$(INPUT_CONF_PATH)" "$(OUTPUT_CONF_PATH)" "$(OUTPUT_CONF_SAVE_PATH)"
	@node $(UTIL_DIR)/downloadcerts.js "$(BUILD_DIR)" "$(INPUT_CONF_PATH)" "$(OUTPUT_CONF_PATH)"


dash:    ## Update the dashboard web app once the back-end creation has finished
	$(eval DUMMY_VARIABLE := $(call FromOutConf,$(STACK_OUTPUT_PATH),sg2cdk,iotThingPrefix))
	$(info -- Rebuilding WebApp ${DUMMY_VARIABLE})
	$(eval WEBAPP_URL := $(call FromOutConf,webAppUrl))
	$(eval CLOUDFRONT_DISTRIBUTION_ID := $(call FromOutConf,webAppDistributionId))
	$(eval WEBAPP_BUCKET_NAME := $(call FromOutConf,webAppBucketName))
	$(info CLOUDFRONT_DISTRIBUTION_ID is [${CLOUDFRONT_DISTRIBUTION_ID}])
	$(info WEBAPP_BUCKET_NAME is [${WEBAPP_BUCKET_NAME}])
	cd ../sg2ui; npm run build
	aws s3 cp ../sg2ui/build "s3://${WEBAPP_BUCKET_NAME}" --recursive --acl public-read --profile $(AWS_PROFILE); \
	aws cloudfront create-invalidation --distribution-id $(CLOUDFRONT_DISTRIBUTION_ID) --paths "/*" --profile $(AWS_PROFILE);
	@echo "Web app/dashboard pushed out to S3/Cloudfront"
	@echo "Cloudfront update may take a little while..."
	@echo "Dashboard URL: https://$(WEBAPP_URL)"

# 	Initializing the database - assuming virtualenv in 'venv' subfolder with requirements installed.
db:   ## Initialize the database using the dbloader script
	@cd ..; source venv/bin/activate; cd ./db; python dbloader.py
	@echo "DB Load done"

static: ## Upload static image media with proper privileges
	$(eval DUMMY_VARIABLE := $(call FromOutConf,iotThingPrefix))
	$(info -- Reloading Static Media Images ${DUMMY_VARIABLE})
	$(eval STATIC_MEDIA_BUCKET := $(call FromOutConf,staticMediaBucketName))
	$(eval STATIC_MEDIA_URL := $(call FromOutConf,staticMediaBucketUrl))
	aws s3 cp ./static/dash_media_files "s3://${STATIC_MEDIA_BUCKET}" --recursive --acl public-read --profile $(AWS_PROFILE);
	@echo "Static Media Loaded..."

#bootstrap1:  ## Bootstrap Installation and get user-settings.
#	@echo "Bootstrapping user-settings"
#	$(eval AWS_PROFILE = $(call FromBootstrapConf,aws_profile))
#	@echo "Bootstrapping before profile: $(AWS_PROFILE)"
#	@undefine AWS_PROFILE
#	@cd ./installer; python bootstrap.py
#	$(eval AWS_PROFILE = $(call FromBootstrapConf,aws_profile))
#	@echo "Bootstrapping after profile: $(AWS_PROFILE)"
##   @cdk bootstrap --profile $(AWS_PROFILE)

bootstrap:  ## Bootstrap Installation and get user-settings.
	@echo "Bootstrapping user-settings" ;\
    set -e ;\
	AWS_PROFILE=$(shell node util/getconfig.js ./build/iotbootstrap.json aws_profile) ;\
	echo "Bootstrapping before profile: " $$AWS_PROFILE; \
	cd ./installer; python bootstrap.py; cd .. ;\
	AWS_PROFILE=$(shell node util/getconfig.js ./build/iotbootstrap.json aws_profile) ;\
	echo "Bootstrapping after profile: " $$AWS_PROFILE;
#   @cdk bootstrap --profile $(AWS_PROFILE)

build: ## synthesize the CFN script. For testing only
	@echo "Synthesizing CloudFormation script"
	@npm run build
	@cdk synthesize --profile $(AWS_PROFILE)

#all: stack db static dash

clean: ## delete stack and all components
	@echo "Deleting CDK environment on cloud"

	@cdk destroy --force --profile $(AWS_PROFILE) \
		-c phase=phase1
	@echo "Stack removed for phase1"
	@echo "Removing certificate files"
	@rm -rf $(BUILD_DIR)/*.pem
	@echo "Removing output config file"
	@rm -rf $(STACK_OUTPUT_PATH)
	@echo "Clearing out SSM params"
	-util/deleteparams $(STACK_CONFIG_NAME) $(AWS_PROFILE)
	-util/deleteparams $(STACK_CONFIG_NAME) $(AWS_PROFILE)
	@echo "All done!"

test: ## Run tests to make sure environment is set up properly
	@echo "Running tests"

# These auto-generate help and make sure the default target shows documentation

.DEFAULT_GOAL := help
.PHONY: help bootstrap build push config dash db static clean test

help:
	@echo ""
	@echo "Makefile for SimpleIOT project CDK environment"
	@echo "-----------------------------------------------"
	@echo "make {command}"
	@echo ""
	@grep -E '^[a-zA-Z0-9_-]+:.*?## .*$$' $(MAKEFILE_LIST) \
	| sed -n 's/^\(.*\): \(.*\)##\(.*\)/  -- \1: \3/p'
	@echo ""
