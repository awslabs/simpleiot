"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Common = void 0;
/* Â© 2022 Amazon Web Services, Inc. or its affiliates. All Rights Reserved.
 *
 * SimpleIOT project.
 * Author: Ramin Firoozye (framin@amazon.com)
*/
/*
* Common utilities
 */
const cdk = require("aws-cdk-lib");
const lambda = require("aws-cdk-lib/aws-lambda");
class Common {
    static output(obj, name, value, desc) {
        if (value) {
            new cdk.CfnOutput(obj, name, {
                value: value,
                description: desc
            }).overrideLogicalId(name);
        }
    }
    // Returns the python runtime version used for all lambda layers.
    //
    static pythonRuntimeVersion() {
        return lambda.Runtime.PYTHON_3_8;
    }
    // Utility to add mulitple tags to a construct
    //
    static addTags(construct, tags) {
        for (let key in tags) {
            let value = tags[key];
            cdk.Tags.of(construct).add(key, value);
        }
    }
    static snakeToCamel(s) {
        return s.replace(/(\_\w)/g, function (m) { return m[1].toUpperCase(); });
    }
    static isLower(character) {
        return (character === character.toLowerCase()) && (character !== character.toUpperCase());
    }
    static generatePassword(length, withUpper = false, withSymbol = false) {
        var haveUpper = false;
        var charSet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        if (withSymbol) {
            charSet += "!@#$%^&*()_+=";
        }
        var result = Array.apply(null, Array(length)).map(function () {
            var one = charSet.charAt(Math.random() * charSet.length);
            if (withUpper && !haveUpper) {
                if (Common.isLower(one)) {
                    one = one.toUpperCase();
                    haveUpper = true;
                }
            }
            return one;
        }).join('');
        return result;
    }
}
exports.Common = Common;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29tbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBOzs7O0VBSUU7QUFDRjs7R0FFRztBQUNILG1DQUFtQztBQUVuQyxpREFBaUQ7QUFHakQsTUFBYSxNQUFNO0lBQ1IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFjLEVBQUUsSUFBWSxFQUFFLEtBQWEsRUFBRSxJQUFZO1FBQzFFLElBQUksS0FBSyxFQUFFO1lBQ1AsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUU7Z0JBQ3JCLEtBQUssRUFBRSxLQUFLO2dCQUNaLFdBQVcsRUFBRSxJQUFJO2FBQ3BCLENBQ0osQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQTtTQUM1QjtJQUNMLENBQUM7SUFFRCxpRUFBaUU7SUFDakUsRUFBRTtJQUNLLE1BQU0sQ0FBQyxvQkFBb0I7UUFDOUIsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQztJQUNyQyxDQUFDO0lBQ0QsOENBQThDO0lBQzlDLEVBQUU7SUFDSyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQW9CLEVBQUUsSUFBK0I7UUFDdkUsS0FBSyxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUU7WUFDbEIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3RCLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDMUM7SUFDTCxDQUFDO0lBRU0sTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFTO1FBQ2hDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsVUFBUyxDQUFDLElBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBRU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFpQjtRQUN0QyxPQUFPLENBQUMsU0FBUyxLQUFLLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxLQUFLLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQzVGLENBQUM7SUFFTSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBYyxFQUNkLFlBQXFCLEtBQUssRUFDMUIsYUFBc0IsS0FBSztRQUUxRCxJQUFJLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdEIsSUFBSSxPQUFPLEdBQUcsZ0VBQWdFLENBQUM7UUFDL0UsSUFBSSxVQUFVLEVBQUU7WUFDWixPQUFPLElBQUksZUFBZSxDQUFBO1NBQzdCO1FBQ0QsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1lBQzlDLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN6RCxJQUFJLFNBQVMsSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDekIsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUNyQixHQUFHLEdBQUcsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO29CQUN4QixTQUFTLEdBQUcsSUFBSSxDQUFDO2lCQUNwQjthQUNKO1lBQ0QsT0FBTyxHQUFHLENBQUM7UUFDZixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDWixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0NBQ0Y7QUF0REQsd0JBc0RDIiwic291cmNlc0NvbnRlbnQiOlsiLyogwqkgMjAyMiBBbWF6b24gV2ViIFNlcnZpY2VzLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFNpbXBsZUlPVCBwcm9qZWN0LlxuICogQXV0aG9yOiBSYW1pbiBGaXJvb3p5ZSAoZnJhbWluQGFtYXpvbi5jb20pXG4qL1xuLypcbiogQ29tbW9uIHV0aWxpdGllc1xuICovXG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgbGFtYmRhID0gcmVxdWlyZSgnYXdzLWNkay1saWIvYXdzLWxhbWJkYScpXG5cblxuZXhwb3J0IGNsYXNzIENvbW1vbiB7XG4gICAgcHVibGljIHN0YXRpYyBvdXRwdXQob2JqOiBDb25zdHJ1Y3QsIG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZywgZGVzYzogc3RyaW5nKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgbmV3IGNkay5DZm5PdXRwdXQob2JqLCBuYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGRlc2NcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApLm92ZXJyaWRlTG9naWNhbElkKG5hbWUpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm5zIHRoZSBweXRob24gcnVudGltZSB2ZXJzaW9uIHVzZWQgZm9yIGFsbCBsYW1iZGEgbGF5ZXJzLlxuICAgIC8vXG4gICAgcHVibGljIHN0YXRpYyBweXRob25SdW50aW1lVmVyc2lvbigpIHtcbiAgICAgICAgcmV0dXJuIGxhbWJkYS5SdW50aW1lLlBZVEhPTl8zXzg7XG4gICAgfVxuICAgIC8vIFV0aWxpdHkgdG8gYWRkIG11bGl0cGxlIHRhZ3MgdG8gYSBjb25zdHJ1Y3RcbiAgICAvL1xuICAgIHB1YmxpYyBzdGF0aWMgYWRkVGFncyhjb25zdHJ1Y3Q6IENvbnN0cnVjdCwgdGFnczogeyBbIG5hbWU6IHN0cmluZyBdOiBhbnkgfSkge1xuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGFncykge1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gdGFnc1trZXldO1xuICAgICAgICAgICAgY2RrLlRhZ3Mub2YoY29uc3RydWN0KS5hZGQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHNuYWtlVG9DYW1lbChzOiBzdHJpbmcpe1xuICAgICAgICByZXR1cm4gcy5yZXBsYWNlKC8oXFxfXFx3KS9nLCBmdW5jdGlvbihtKXtyZXR1cm4gbVsxXS50b1VwcGVyQ2FzZSgpO30pO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGlzTG93ZXIoY2hhcmFjdGVyOiBzdHJpbmcpIDogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gKGNoYXJhY3RlciA9PT0gY2hhcmFjdGVyLnRvTG93ZXJDYXNlKCkpICYmIChjaGFyYWN0ZXIgIT09IGNoYXJhY3Rlci50b1VwcGVyQ2FzZSgpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdlbmVyYXRlUGFzc3dvcmQobGVuZ3RoOiBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGhVcHBlcjogYm9vbGVhbiA9IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoU3ltYm9sOiBib29sZWFuID0gZmFsc2UpIDogc3RyaW5nXG4gICAge1xuICAgIHZhciBoYXZlVXBwZXIgPSBmYWxzZTtcbiAgICB2YXIgY2hhclNldCA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSc7XG4gICAgaWYgKHdpdGhTeW1ib2wpIHtcbiAgICAgICAgY2hhclNldCArPSBcIiFAIyQlXiYqKClfKz1cIlxuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gQXJyYXkuYXBwbHkobnVsbCwgQXJyYXkobGVuZ3RoKSkubWFwKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgb25lID0gY2hhclNldC5jaGFyQXQoTWF0aC5yYW5kb20oKSAqIGNoYXJTZXQubGVuZ3RoKTtcbiAgICAgICAgaWYgKHdpdGhVcHBlciAmJiAhaGF2ZVVwcGVyKSB7XG4gICAgICAgICAgICBpZiAoQ29tbW9uLmlzTG93ZXIob25lKSkge1xuICAgICAgICAgICAgICAgIG9uZSA9IG9uZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIGhhdmVVcHBlciA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9uZTtcbiAgICB9KS5qb2luKCcnKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59Il19